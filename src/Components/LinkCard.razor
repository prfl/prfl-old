@inject HttpClient client
@using Models
@using Profile.Models.IP

<div class="my-3 p-3 rounded shadow bg-light">
  <div class="row">

    <div class="col-1">
      <img src="@IconUrl" />
    </div>
    @if(IsFavorite == true) {
      col = "col-8";
    }
    else {
      col = "col-9";
    }
    <div class="@col ml-3">
      <a href="@Url" @onclick="@(() => AddClick(UserId, LinkId))">
        <strong class="d-block text-gray-dark">@Name</strong>
      </a>
    </div>

    @if (IsFavorite == true)
          {
      <div class="col-1">
        
          <img src="/assets/icons/star-fill.svg" height="20px" width="20px" />
        
      </div>
    }
    <div class="col-1">
      

      <a data-bs-toggle="modal" data-bs-target="#@ModalId"><img src="/assets/icons/info-circle-outline.svg"/></a>

      <!-- Modal -->
      <div class="modal fade" id="@ModalId" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="exampleModalLabel">@Name</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              @Description
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
          </div>
        </div>
      </div>
      
    </div>

  </div>
</div>








@code {
  [Parameter] public string ModalId { get; set; }
  [Parameter] public string Url { get; set; }
  [Parameter] public string Name { get; set; }
  [Parameter] public string Description { get; set; }
  [Parameter] public string IconUrl { get; set; }
  [Parameter] public bool IsFavorite { get; set; }
  [Parameter] public string UserId { get; set; }
  [Parameter] public string LinkId { get; set; }
  [Parameter] public LinkType Type { get; set; }
  [Parameter] public Application Application { get; set; }
  public string col { get; set; }

  public GeoIP GeoIP { get; set; }

  private async Task AddClick(string userId, string linkId) {
    GeoIP = await client.GetFromJsonAsync<GeoIP>("https://json.geoiplookup.io/");
    
    if(GeoIP != null) {
      await client.PostAsJsonAsync($"https://prfl-analytics.azurewebsites.net/api/clicks", CreateClick(userId, linkId));
    }
  }

  private Click CreateClick(string userId, string linkId) {
    var click = new Click(){
        ClickDateTime = DateTime.Now,
        UserId = userId,
        LinkId = linkId,
        Type = Type,
        PublicIP = GeoIP.IP,
        CountryCode = GeoIP.Country_Code,
        CountryName = GeoIP.Country_Name,
        Region = GeoIP.Region,
        District = GeoIP.District,
        Longitude = GeoIP.Longitude,
        Latitude = GeoIP.Latitude
      };
      return click;
  }
}